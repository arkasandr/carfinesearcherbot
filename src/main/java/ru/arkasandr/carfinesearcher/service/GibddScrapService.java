package ru.arkasandr.carfinesearcher.service;import com.microsoft.playwright.BrowserContext;import com.microsoft.playwright.Page;import com.microsoft.playwright.options.ScreenshotType;import lombok.RequiredArgsConstructor;import lombok.extern.slf4j.Slf4j;import org.springframework.beans.factory.annotation.Value;import org.springframework.stereotype.Service;import ru.arkasandr.carfinesearcher.config.BrowserInitializeConfig;import ru.arkasandr.carfinesearcher.config.GibddInitializeConfig;import ru.arkasandr.carfinesearcher.service.message.dto.Answer;import ru.arkasandr.carfinesearcher.service.message.dto.CaptchaMessageRequestDto;import ru.arkasandr.carfinesearcher.model.Fine;import ru.arkasandr.carfinesearcher.service.message.dto.GibddRequestMessageDto;import java.nio.file.Paths;import java.time.format.DateTimeFormatter;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import static java.time.LocalDateTime.now;import static java.time.format.DateTimeFormatter.ofPattern;import static org.apache.commons.collections4.CollectionUtils.isEmpty;import static org.apache.commons.lang3.math.NumberUtils.toDouble;@Service@Slf4j@RequiredArgsConstructorpublic class GibddScrapService {    private static final Integer WAIT_BUTTON_TIMEOUT = 5000;    private static final Integer WAIT_SEARCH_RESULT_TIMEOUT = 20000;    private static final Integer START_REG_NUM_INDEX = 0;    private static final Integer END_REG_NUM_INDEX = 6;    private static final String ANSWER_EXCEPTION = "Произошел сбой, повторите запрос позднее";    private static final String FINE_MESSAGE = "В результате проверки были найдены сведения о неуплаченных штрафах";    private static final String FINE_NUMBER = "Номер штрафа:";    private static final String FINE_KOAP_POINT = "Статья КоАП РФ:";    private static final String FINE_VIOLATION_DATE = "Дата и время нарушения:";    private static final String FINE_GIBDD_DEPARTMENT = "Подразделение ГИБДД:";    private static final String FINE_GIBDD_RESOLUTION = "Постановление:";    private static final String FINE_REQUIRED_AMOUNT = "Сумма штрафа:";    private static final String CAPTCHA_EMPTY_MESSAGE = "CAPTCHA IS EMPTY";    private static final String CAPTCHA_ERROR_MESSAGE = "CAPTCHA ERROR";    @Value("${gibdd.fines.url}")    private String fineUrl;    @Value("${gibdd.fines.screens}")    private String screens;    private final GibddInitializeConfig gibddInitializeConfig;    private final BrowserInitializeConfig browserInitialize;    public CaptchaMessageRequestDto getCaptcha(GibddRequestMessageDto data) {        var regNumber = data.getRegistrationNumber().substring(START_REG_NUM_INDEX, END_REG_NUM_INDEX);        var regReg = data.getRegistrationNumber().substring(END_REG_NUM_INDEX);        var certNumber = data.getCertificateNumber();        var uuid = data.getUuid();        BrowserContext context = gibddInitializeConfig.getContext();        Page page = browserInitialize.page(context);        CaptchaMessageRequestDto result = CaptchaMessageRequestDto.builder()                .uuid(uuid)                .message(CAPTCHA_EMPTY_MESSAGE)                .build();        try {            log.info("UUID: {}. Start scraping process with regNumber: {} and certNumber: {} ", uuid, regNumber, certNumber);            page.navigate(fineUrl);            page.waitForSelector(".checkFinesRegnum", new Page.WaitForSelectorOptions().setTimeout(20000));            page.click("#checkFinesRegnum");            page.type("#checkFinesRegnum", regNumber, new Page.TypeOptions().setDelay(100));            page.click("#checkFinesRegreg");            page.type("#checkFinesRegreg", regReg, new Page.TypeOptions().setDelay(100));            page.click("#checkFinesStsnum");            page.type("#checkFinesStsnum", certNumber, new Page.TypeOptions().setDelay(100));            page.waitForTimeout(WAIT_BUTTON_TIMEOUT);            page.click("text = запросить проверку");            page.waitForSelector("#captchaTitle", new Page.WaitForSelectorOptions().setTimeout(20000));            page.waitForTimeout(WAIT_BUTTON_TIMEOUT);            if (!page.querySelectorAll("#captchaTitle").isEmpty()) {                page.screenshot(new Page.ScreenshotOptions().setClip(300.0,600.0, 180.0, 60.0).setPath(Paths.get(screens                        + fileNameFormat() + ".png")));                result = CaptchaMessageRequestDto.builder()                        .uuid(uuid)                        .captcha(page.screenshot(new Page.ScreenshotOptions()                                .setClip(300.0,600.0, 180.0, 60.0)                                .setType(ScreenshotType.PNG)))                        .build();            }        } catch (Exception e) {            log.info("GibddScrapService error: {}", e.getMessage());            page.screenshot(new Page.ScreenshotOptions().setPath(Paths.get(screens                    + fileNameFormat() + ".png")));            result = CaptchaMessageRequestDto.builder()                    .uuid(uuid)                    .message(CAPTCHA_ERROR_MESSAGE)                    .build();        }        return result;    }    public Answer scrap(GibddRequestMessageDto data) {        var regNumber = data.getRegistrationNumber().substring(START_REG_NUM_INDEX, END_REG_NUM_INDEX);        var regReg = data.getRegistrationNumber().substring(END_REG_NUM_INDEX);        var certNumber = data.getCertificateNumber();        var uuid = data.getUuid();        BrowserContext context = gibddInitializeConfig.getContext();        Page page = browserInitialize.page(context);        Answer result;        try {            log.info("UUID: {}. Start scraping process with regNumber: {} and certNumber: {} ", uuid, regNumber, certNumber);            page.navigate(fineUrl);            page.waitForSelector(".checkFinesRegnum", new Page.WaitForSelectorOptions().setTimeout(20000));            page.click("#checkFinesRegnum");            page.type("#checkFinesRegnum", regNumber, new Page.TypeOptions().setDelay(1000));            page.click("#checkFinesRegreg");            page.type("#checkFinesRegreg", regReg, new Page.TypeOptions().setDelay(1000));            page.click("#checkFinesStsnum");            page.type("#checkFinesStsnum", certNumber, new Page.TypeOptions().setDelay(1000));            page.click("text = запросить проверку");//            if (!page.querySelectorAll(".captchaPic").isEmpty())//                log.info("Trying to solve captcha");//            page.waitForTimeout(WAIT_SEARCH_RESULT_TIMEOUT);            if (!page.querySelectorAll(".close_modal_window").isEmpty()) {                log.info("Trying to close adds_modal");//                page.click("text = X");            }            var checkingInfo = page.querySelectorAll("#checkFinesSheet > p").get(0).innerText();            var checkingDate = page.querySelectorAll("#checkFinesSheet > p").get(1).innerText();            var checkFines = page.querySelectorAll("#checkFines > p > p");            var noFines = !isEmpty(checkFines);            var checkingMessage = noFines                    ? page.querySelectorAll("#checkFines > p > p").get(0).innerText()                    : FINE_MESSAGE;            List<Fine> resultFines = new ArrayList<>();            if (!noFines) {                var finesList = page.querySelectorAll(".checkResult");                log.info("Query return {} fines", finesList.size());                resultFines = new ArrayList<>(finesList.size());                for (int i = 0; i < finesList.size(); i++) {                    Map<String, String> fineDescription = new HashMap<>();                    var fineRoot = page.querySelectorAll(".checkResult").get(i);                    var fineNumber = fineRoot                            .querySelectorAll("ul > .decis-delimiter")                            .get(0)                            .innerText();                    fineDescription.put(FINE_NUMBER, fineNumber);                    var fineComponentsList = fineRoot                            .querySelectorAll("ul > li");                    log.info("Fine with number: {}", fineNumber);                    for (int j = 0; j < fineComponentsList.size(); j++) {                        var fineComponent = fineComponentsList.get(j);                        var componentKey = fineComponent.querySelectorAll("span").get(0).innerText();                        var componentValue = fineComponent.querySelectorAll("span").get(1).innerText();                        fineDescription.put(componentKey, componentValue);                        log.info("{} {};", componentKey, componentValue);                    }                    var newFine = Fine.builder()                            .receiptDate(now())                            .value(getValueFromString(fineDescription.get(FINE_REQUIRED_AMOUNT)))                            .name(fineDescription.get(FINE_NUMBER))                            .violationDateAndTime(fineDescription.get(FINE_VIOLATION_DATE))                            .koapPoint(fineDescription.get(FINE_KOAP_POINT))                            .gibddDepartment(fineDescription.get(FINE_GIBDD_DEPARTMENT))                            .gibddResolution(fineDescription.get(FINE_GIBDD_RESOLUTION))                            .requiredAmount(fineDescription.get(FINE_REQUIRED_AMOUNT))                            .build();                    resultFines.add(newFine);                }            }            log.info("Результаты проверки: \n "                    + "- {};\n"                    + "- {};\n"                    + "- {};", checkingInfo, checkingDate, checkingMessage);            result = Answer.builder()                    .checkingInfo(checkingInfo)                    .checkingDate(checkingDate)                    .checkingMessage(checkingMessage)                    .fines(resultFines)                    .build();        } catch (Exception e) {            log.info("GibddScrapService error: {}", e.getMessage());            page.screenshot(new Page.ScreenshotOptions().setPath(Paths.get(screens                    + fileNameFormat() + ".png")));            result = Answer.builder()                    .checkingMessage(ANSWER_EXCEPTION)                    .build();        } finally {            context.browser().close();            log.info("Browser closed");        }        return result;    }    private String fileNameFormat() {        var date = now();        DateTimeFormatter formatters = ofPattern("yyyyMMddHHmmss");        return date.format(formatters);    }    private Double getValueFromString(String value) {        String[] valueParts = value.replace("\n", " ").split("руб.");        return toDouble(valueParts[0].replaceAll("[^0-9]", ""));    }}