package ru.arkasandr.carfinesearcher.service;import lombok.RequiredArgsConstructor;import lombok.extern.slf4j.Slf4j;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import org.telegram.telegrambots.meta.api.methods.send.SendMessage;import ru.arkasandr.carfinesearcher.model.Chat;import ru.arkasandr.carfinesearcher.model.GibddRequest;import ru.arkasandr.carfinesearcher.telegram.keyboards.ReplyKeyboardMaker;import java.util.Comparator;import java.util.Objects;import static java.time.LocalDateTime.now;import static java.util.Objects.isNull;import static java.util.Objects.nonNull;import static org.apache.commons.lang3.math.NumberUtils.toLong;import static ru.arkasandr.carfinesearcher.model.enums.RequestStatus.READY_FOR_SEND;import static ru.arkasandr.carfinesearcher.service.util.CharTransformUtil.cyrillicToLatin;import static ru.arkasandr.carfinesearcher.service.util.CharTransformUtil.latinToCyrillic;import static ru.arkasandr.carfinesearcher.service.util.GenerateSendMessageUtil.generateSendMessageWithKeyboard;import static ru.arkasandr.carfinesearcher.telegram.constants.BotMessageEnum.*;@Service@RequiredArgsConstructor@Slf4jpublic class ProcessDataService {    private final ReplyKeyboardMaker keyboardMaker;    private final ChatService chatService;    private final CarService carService;    private final RequestService requestService;    /**     * Метод обрабатывает регистрационный номер и формирует ответ пользователю     */    @Transactional    public SendMessage processRegistrationNumber(Chat chat, String chatId, String registrationNumber) {        SendMessage result;        registrationNumber = latinToCyrillic(registrationNumber);        var permission = checkUserRestrictionsForRequestSending(chatId);        if (!isNull(permission)) {            return permission;        }        var existCarWithoutCertificateNumber = carService.findCarWithoutCertificateNumber();        if (existCarWithoutCertificateNumber.isEmpty()) {            var existCar = carService.findCarByRegistrationNumber(registrationNumber);            if (existCar.isEmpty()) {                chatService.saveRegistrationNumber(chat, registrationNumber);                log.info("RegistrationNumber is: {}", registrationNumber);                result = new SendMessage(chatId, REGISTRATION_NUMBER_MESSAGE.getMessage());            } else {                existCar.ifPresent(c -> {                    c.setUpdateDate(now());                    requestService.saveReadyForSendRequest(chatId);                    carService.save(c);                });                result = new SendMessage(chatId, EXCEPTION_EXISTING_REGISTRATION_NUMBER.getMessage());            }        } else {            result = new SendMessage(chatId, EXCEPTION_EXISTING_REQUEST.getMessage());        }        return result;    }    /**     * Метод обрабатывает номер свидетельства о регистрации и формирует ответ пользователю     */    @Transactional    public SendMessage processCertificateNumber(Chat chat, String chatId, String certificateNumber) {        SendMessage result;        var certNumber = cyrillicToLatin(certificateNumber);        var existCar = carService.findCarWithRegistrationNumberAndLastUpdateDate(chat.getId());        if (existCar.isPresent()) {            existCar.ifPresent(car -> {                        var status = car.getRequest().stream()                                .filter(Objects::nonNull)                                .map(GibddRequest::getStatus)                                .findFirst()                                .orElse(null);                        if (isNull(status)) {                            chatService.saveCertificateNumber(chat, car, certNumber);                            log.info("CertificateNumber is: {}", certNumber);                        }                    }            );            result = generateSendMessageWithKeyboard(chatId, CERTIFICATE_NUMBER_MESSAGE.getMessage(),                    keyboardMaker.getMainMenuKeyboard());            requestService.saveReadyForSendRequest(chatId);        } else {            existCar = carService.findCarByCertificateNumberAndLastUpdateDate(chat.getId(), certNumber);            if (existCar.isPresent()) {                var request = existCar.get().getRequest().stream()                        .filter(r -> nonNull(r.getCreateDate()))                        .max(Comparator.comparing(GibddRequest::getCreateDate))                        .orElse(null);                if (!isNull(request) && !isNull(request.getStatus()) && READY_FOR_SEND.equals(request.getStatus())) {                    result = generateSendMessageWithKeyboard(chatId, READY_DATA_MESSAGE.getMessage(),                            keyboardMaker.getMainMenuKeyboard());                } else {                    result = generateSendMessageWithKeyboard(chatId, EXCEPTION_CERTIFICATE_REPEATED.getMessage(),                            keyboardMaker.getHelpMenuKeyboard());                }            } else {                var readyRequest = carService.findCarIdWithFullDataAndReadyForSend(toLong(chatId));                result = isNull(readyRequest)                        ? generateSendMessageWithKeyboard(chatId, EXCEPTION_CERTIFICATE_BEFORE_REGISTRATION.getMessage(),                        keyboardMaker.getHelpMenuKeyboard())                        : generateSendMessageWithKeyboard(chatId, EXCEPTION_CURRENT_REQUEST.getMessage(),                        keyboardMaker.getMainMenuKeyboard());            }        }        return result;    }    /**     * Метод обрабатывает captcha, присланную в виде рисунка, и формирует ответ пользователю     */    @Transactional    public SendMessage processCaptcha(Chat chat, String chatId, String captcha) {        SendMessage result;        var carId = carService.findCarIdWithFullDataAndCaptchaIsWaitingStatus(chat.getId());        if (!isNull(carId)) {            requestService.increaseCaptchaAttempt(carId);            requestService.sendRequestWithCaptchaValueToParser(carId, captcha);            result = new SendMessage(chatId, CAPTCHA_VALUE_MESSAGE.getMessage());        } else {            result = new SendMessage(chatId, EXCEPTION_CAPTCHA_WAITING_REQUEST.getMessage());        }        return result;    }    /**     * Метод проверяет возможность пользователя отправить запрос парсеру     */    @Transactional    public SendMessage checkUserRestrictionsForRequestSending(String chatId) {        SendMessage result = null;        if (!requestService.isDailyRequestsLimit(toLong(chatId))) {            result = generateSendMessageWithKeyboard(chatId, EXCEPTION_DAILY_REQUEST_MAX_ATTEMPT.getMessage(),                    keyboardMaker.getHelpMenuKeyboard());        }        if (requestService.isCurrentRequestsLimit(toLong(chatId))) {            var existRequestStatus = requestService.findByChatId(chatId).getStatus();            if (READY_FOR_SEND.equals(existRequestStatus)) {                result = generateSendMessageWithKeyboard(chatId, EXCEPTION_CURRENT_REQUEST.getMessage(),                        keyboardMaker.getMainMenuKeyboard());            } else {                result = generateSendMessageWithKeyboard(chatId, EXCEPTION_CURRENT_REQUEST.getMessage(),                        keyboardMaker.getHelpMenuKeyboard());            }        }        return result;    }}