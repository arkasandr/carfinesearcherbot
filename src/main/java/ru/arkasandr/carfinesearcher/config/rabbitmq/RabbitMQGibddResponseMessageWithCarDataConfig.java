package ru.arkasandr.carfinesearcher.config.rabbitmq;import org.aopalliance.aop.Advice;import org.springframework.amqp.core.*;import org.springframework.amqp.rabbit.config.RetryInterceptorBuilder;import org.springframework.amqp.rabbit.connection.CachingConnectionFactory;import org.springframework.amqp.rabbit.connection.ConnectionFactory;import org.springframework.amqp.rabbit.core.RabbitTemplate;import org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer;import org.springframework.amqp.rabbit.retry.RejectAndDontRequeueRecoverer;import org.springframework.amqp.support.converter.Jackson2JsonMessageConverter;import org.springframework.amqp.support.converter.MessageConverter;import org.springframework.beans.factory.annotation.Value;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.context.annotation.Primary;import org.springframework.integration.annotation.IntegrationComponentScan;import org.springframework.integration.config.EnableIntegration;import org.springframework.retry.interceptor.RetryOperationsInterceptor;@Configuration@IntegrationComponentScan@EnableIntegrationpublic class RabbitMQGibddResponseMessageWithCarDataConfig {    @Value("${spring.rabbitmq.queue_client}")    private String queue;    @Value("${spring.rabbitmq.exchange_client}")    private String exchange;    @Value("${spring.rabbitmq.routingkey_client}")    private String routingKey;    @Value("${spring.rabbitmq.username}")    private String username;    @Value("${spring.rabbitmq.password}")    private String password;    @Value("${spring.rabbitmq.host}")    private String host;    @Bean    Queue serverQueue() {        return new Queue(queue, true);    }    @Bean    Exchange myServerExchange() {        return ExchangeBuilder.directExchange(exchange)                .durable(true)                .build();    }    @Bean    Binding serverBinding() {        return BindingBuilder                .bind(serverQueue())                .to(myServerExchange())                .with(routingKey)                .noargs();    }    @Primary    @Bean    public ConnectionFactory connectionFactory() {        CachingConnectionFactory cachingConnectionFactory = new CachingConnectionFactory(host);        cachingConnectionFactory.setUsername(username);        cachingConnectionFactory.setPassword(password);        return cachingConnectionFactory;    }    @Bean    public MessageConverter jsonMessageConverterServer() {        return new Jackson2JsonMessageConverter();    }    @Bean    public RabbitTemplate rabbitTemplateServer(ConnectionFactory connectionFactory) {        final RabbitTemplate rabbitTemplate = new RabbitTemplate(connectionFactory);        rabbitTemplate.setMessageConverter(jsonMessageConverterServer());        return rabbitTemplate;    }    @Bean    public SimpleMessageListenerContainer workListenerContainer() {        SimpleMessageListenerContainer container =                new SimpleMessageListenerContainer(connectionFactory());        container.setQueues(serverQueue());        container.setConcurrentConsumers(2);        container.setDefaultRequeueRejected(false);        container.setAdviceChain(new Advice[]{interceptor()});        return container;    }    @Bean    RetryOperationsInterceptor interceptor() {        return RetryInterceptorBuilder.stateless()                .maxAttempts(1)                .backOffOptions(1000, 1, 60000)                .recoverer(new RejectAndDontRequeueRecoverer())                .build();    }}