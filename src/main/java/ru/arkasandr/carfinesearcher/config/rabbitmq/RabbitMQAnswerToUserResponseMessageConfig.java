package ru.arkasandr.carfinesearcher.config.rabbitmq;import lombok.RequiredArgsConstructor;import org.aopalliance.aop.Advice;import org.springframework.amqp.core.*;import org.springframework.amqp.rabbit.config.RetryInterceptorBuilder;import org.springframework.amqp.rabbit.connection.ConnectionFactory;import org.springframework.amqp.rabbit.core.RabbitTemplate;import org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer;import org.springframework.amqp.rabbit.retry.RejectAndDontRequeueRecoverer;import org.springframework.amqp.support.converter.Jackson2JsonMessageConverter;import org.springframework.amqp.support.converter.MessageConverter;import org.springframework.beans.factory.annotation.Value;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.integration.annotation.IntegrationComponentScan;import org.springframework.integration.config.EnableIntegration;import org.springframework.retry.interceptor.RetryOperationsInterceptor;@Configuration@RequiredArgsConstructor@IntegrationComponentScan@EnableIntegrationpublic class RabbitMQAnswerToUserResponseMessageConfig {    @Value("${spring.rabbitmq.queue_answer}")    private String queue;    @Value("${spring.rabbitmq.exchange_answer}")    private String exchange;    @Value("${spring.rabbitmq.routingkey_answer}")    private String routingKey;    private final ConnectionFactory connectionFactory;    @Bean    Queue answerToUserResponseQueue() {        return new Queue(queue, true);    }    @Bean    Exchange answerToUserResponseExchange() {        return ExchangeBuilder.directExchange(exchange)                .durable(true)                .build();    }    @Bean    Binding answerToUserResponseBinding() {        return BindingBuilder                .bind(answerToUserResponseQueue())                .to(answerToUserResponseExchange())                .with(routingKey)                .noargs();    }    @Bean    public MessageConverter answerToUserResponseConverter() {        return new Jackson2JsonMessageConverter();    }    @Bean    public RabbitTemplate answerToUserResponseTemplate(ConnectionFactory connectionFactory) {        final RabbitTemplate rabbitTemplate = new RabbitTemplate(connectionFactory);        rabbitTemplate.setMessageConverter(answerToUserResponseConverter());        return rabbitTemplate;    }    @Bean    public SimpleMessageListenerContainer answerToUserResponseListenerContainer() {        SimpleMessageListenerContainer container =                new SimpleMessageListenerContainer(connectionFactory);        container.setQueues(answerToUserResponseQueue());        container.setConcurrentConsumers(2);        container.setDefaultRequeueRejected(false);        container.setAdviceChain(new Advice[]{answerToUserResponseInterceptor()});        return container;    }    @Bean    RetryOperationsInterceptor answerToUserResponseInterceptor() {        return RetryInterceptorBuilder.stateless()                .maxAttempts(1)                .backOffOptions(1000, 1, 60000)                .recoverer(new RejectAndDontRequeueRecoverer())                .build();    }}