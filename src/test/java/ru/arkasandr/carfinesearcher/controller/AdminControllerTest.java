package ru.arkasandr.carfinesearcher.controller;import com.fasterxml.jackson.databind.ObjectMapper;import org.junit.jupiter.api.BeforeEach;import org.junit.jupiter.api.DisplayName;import org.junit.jupiter.api.Test;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;import org.springframework.boot.test.mock.mockito.MockBean;import org.springframework.test.web.servlet.MockMvc;import ru.arkasandr.carfinesearcher.controller.dto.ChatDto;import ru.arkasandr.carfinesearcher.model.Chat;import ru.arkasandr.carfinesearcher.service.CarService;import ru.arkasandr.carfinesearcher.service.ChatService;import ru.arkasandr.carfinesearcher.service.JobService;import static org.mockito.BDDMockito.given;import static org.springframework.http.MediaType.APPLICATION_JSON;import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;@DisplayName("Класс AdminController")@WebMvcTest(AdminController.class)class AdminControllerTest {    public static final Long CHAT_ID = 1L;    public static final String FIRST_NAME = "Name";    @Autowired    private MockMvc mvc;    @Autowired    private ObjectMapper mapper;    @MockBean    private ChatService chatService;    @MockBean    private JobService jobService;    private AdminController adminController;    @BeforeEach    void setUp() {        adminController = new AdminController(chatService, jobService);    }    @Test    @DisplayName("изменение максимального числа запросов по chatId")    void shouldChangeMaxRequestAttempt() throws Exception {        var expectedDto = ChatDto.builder()                .id(CHAT_ID)                .chatId(CHAT_ID)                .maxRequestAttempt(5)                .build();        var entity = Chat.builder()                .id(CHAT_ID)                .chatId(CHAT_ID)                .maxRequestAttempt(5)                .build();        var expectedBody = mapper.writeValueAsString(expectedDto);        var chat = Chat.builder()                .id(CHAT_ID)                .chatId(CHAT_ID)                .firstName(FIRST_NAME)                .maxRequestAttempt(5)                .build();        given(chatService.changeChatMaxRequestAttempt(entity))                .willReturn(chat);        mvc.perform(post("/api/admin/request/max").contentType(APPLICATION_JSON)                .content(expectedBody))                .andExpect(status().isOk())                .andExpect(jsonPath("id").value(1))                .andExpect(jsonPath("firstName").value(FIRST_NAME));    }}