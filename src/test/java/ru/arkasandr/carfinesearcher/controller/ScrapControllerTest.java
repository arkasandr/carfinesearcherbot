package ru.arkasandr.carfinesearcher.controller;import com.fasterxml.jackson.databind.ObjectMapper;import org.junit.jupiter.api.DisplayName;import org.junit.jupiter.api.Test;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;import org.springframework.boot.test.mock.mockito.MockBean;import org.springframework.test.web.servlet.MockMvc;import ru.arkasandr.carfinesearcher.service.GibddScrapService;import ru.arkasandr.carfinesearcher.service.message.dto.Answer;import ru.arkasandr.carfinesearcher.service.message.dto.CaptchaMessageRequestDto;import ru.arkasandr.carfinesearcher.service.message.dto.CaptchaMessageResponseDto;import ru.arkasandr.carfinesearcher.service.message.dto.GibddRequestMessageDto;import java.util.UUID;import static org.mockito.BDDMockito.given;import static org.springframework.http.MediaType.APPLICATION_JSON;import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;@DisplayName("Класс ScrapController")@WebMvcTest(ScrapController.class)class ScrapControllerTest {    private static final String CAPTCHA = "12345";    private static final String UUID_NUMBER = "73f17c7d-b897-443e-8181-ffadaa9bb36f";    private static final String REGISTRATION_NUMBER = "A999AA55";    private static final String CERTIFICATE_NUMBER = "77AC123123";    @Autowired    private MockMvc mvc;    @Autowired    private ObjectMapper mapper;    @MockBean    private GibddScrapService scrapService;    @Test    @DisplayName("получение captcha")    void shouldReturnCaptcha() throws Exception {        var requestMessage = GibddRequestMessageDto.builder()                .registrationNumber(REGISTRATION_NUMBER)                .certificateNumber(CERTIFICATE_NUMBER)                .uuid(UUID.fromString(UUID_NUMBER))                .build();        var expectedBody = mapper.writeValueAsString(requestMessage);        var captchaMessage = CaptchaMessageRequestDto.builder()                .uuid(UUID.fromString(UUID_NUMBER))                .build();        var expectedResult = mapper.writeValueAsString(captchaMessage);        given(scrapService.scrapCaptcha(requestMessage, null))                .willReturn(captchaMessage);        mvc.perform(post("/api/captcha").contentType(APPLICATION_JSON)                .content(expectedBody))                .andExpect(status().isOk())                .andExpect(content().json(expectedResult));    }    @Test    @DisplayName("получение штрафов")    void shouldReturnFines() throws Exception {        var requestMessage = CaptchaMessageResponseDto.builder()                .uuid(UUID.fromString(UUID_NUMBER))                .value(CAPTCHA)                .build();        var expectedBody = mapper.writeValueAsString(requestMessage);        var answer = Answer.builder()                .uuid(UUID.fromString(UUID_NUMBER))                .build();        var expectedResult = mapper.writeValueAsString(answer);        given(scrapService.scrapFines(requestMessage))                .willReturn(answer);        mvc.perform(post("/api/fines").contentType(APPLICATION_JSON)                .content(expectedBody))                .andExpect(status().isOk())                .andExpect(content().json(expectedResult));    }}