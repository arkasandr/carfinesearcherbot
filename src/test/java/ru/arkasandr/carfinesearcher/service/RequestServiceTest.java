package ru.arkasandr.carfinesearcher.service;import org.junit.jupiter.api.BeforeEach;import org.junit.jupiter.api.DisplayName;import org.junit.jupiter.api.Test;import org.junit.jupiter.api.extension.ExtendWith;import org.mockito.Mock;import org.mockito.Mockito;import org.mockito.junit.jupiter.MockitoExtension;import ru.arkasandr.carfinesearcher.model.Car;import ru.arkasandr.carfinesearcher.model.GibddRequest;import ru.arkasandr.carfinesearcher.model.enums.RequestStatus;import ru.arkasandr.carfinesearcher.repository.GibddRequestRepository;import ru.arkasandr.carfinesearcher.service.message.MessageService;import javax.persistence.EntityNotFoundException;import java.util.HashSet;import java.util.Set;import java.util.UUID;import static java.time.LocalDateTime.now;import static java.util.Optional.of;import static org.apache.commons.lang3.math.NumberUtils.toLong;import static org.assertj.core.api.AssertionsForClassTypes.assertThatThrownBy;import static org.assertj.core.api.Java6Assertions.assertThat;import static org.mockito.ArgumentMatchers.eq;import static org.mockito.BDDMockito.given;import static org.mockito.Mockito.times;import static org.mockito.Mockito.verify;import static ru.arkasandr.carfinesearcher.model.enums.RequestStatus.*;@ExtendWith(MockitoExtension.class)@DisplayName("Класс RequestService")class RequestServiceTest {    private static final Long ID = 1L;    private static final String REGISTRATION_NUMBER = "A999AA55";    private static final String CERTIFICATE_NUMBER = "77AC123123";    private static final String CAPTCHA = "12345";    private static final String UUID_STRING = "73f17c7d-b897-443e-8181-ffadaa9bb36f";    @Mock    private CarService carService;    @Mock    private GibddRequestRepository requestRepository;    @Mock    private MessageService messageService;    private RequestService requestService;    @BeforeEach    void setUp() {        requestService = new RequestService(carService, requestRepository, messageService);    }    @Test    @DisplayName("сохранение запроса готового к отправке в ГИБДД")    void shouldSaveReadyForSendRequest() {        UUID id = UUID.fromString(UUID_STRING);        Car car = Car.builder()                .id(ID)                .registrationNumber(REGISTRATION_NUMBER)                .certificateNumber(CERTIFICATE_NUMBER)                .build();        GibddRequest request = GibddRequest.builder()                .id(id)                .car(car)                .build();        car.setRequest(new HashSet<>(Set.of(request)));        given(carService.findCarWithLastUpdateDateByChatId(ID))                .willReturn(of(car));        given(carService.save(car))                .willReturn(car);        requestService.saveReadyForSendRequest(ID.toString());        assertThat(requestService.saveReadyForSendRequest(ID.toString()))                .isNotNull();        assertThat(requestService.saveReadyForSendRequest(ID.toString()).getStatus())                .isEqualTo(READY_FOR_SEND);    }    @Test    @DisplayName("изменяет статус запроса на SENDING")    void shouldChangeRequestStatusToSending() {        UUID id = UUID.fromString(UUID_STRING);        Car car = Car.builder()                .id(ID)                .registrationNumber(REGISTRATION_NUMBER)                .certificateNumber(CERTIFICATE_NUMBER)                .build();        GibddRequest request = GibddRequest.builder()                .id(id)                .status(READY_FOR_SEND)                .car(car)                .build();        car.setRequest(new HashSet<>(Set.of(request)));        given(requestRepository.save(request))                .willReturn(request);        requestService.changeRequestStatusForSending(request);        assertThat(requestService.changeRequestStatusForSending(request).getStatus())                .isEqualTo(SENDING);        verify(requestRepository, times(2)).save(Mockito.any(GibddRequest.class));    }    @Test    @DisplayName("отправляет запрос через очередь парсеру")    void shouldSendRequestWithCarDataToParser() {        UUID id = UUID.fromString(UUID_STRING);        Car car = Car.builder()                .id(ID)                .registrationNumber(REGISTRATION_NUMBER)                .certificateNumber(CERTIFICATE_NUMBER)                .build();        GibddRequest request = GibddRequest.builder()                .id(id)                .status(READY_FOR_SEND)                .car(car)                .build();        car.setRequest(new HashSet<>(Set.of(request)));        given(requestRepository.findReadyForSendRequestByCarId(ID))                .willReturn(of(request));        given(carService.findCarWithRequestById(ID))                .willReturn(of(car));        requestService.sendRequestWithCarDataToParser(ID);        verify(requestRepository, times(1)).save(Mockito.any(GibddRequest.class));        verify(carService, times(1)).findCarWithRequestById(Mockito.any(Long.class));    }    @Test    @DisplayName("сохранение запроса с несуществующими данными")    void whenSaveWrongRequestThrowNotFoundEntityException() {        given(carService.findCarWithLastUpdateDateByChatId(eq(ID)))                .willThrow(new EntityNotFoundException("Запись о ТС с id = " + ID + " отсутствует!"));        assertThatThrownBy(() -> requestService.saveReadyForSendRequest(ID.toString()))                .isInstanceOf(EntityNotFoundException.class);    }    @Test    @DisplayName("отправление запроса в ГИБДД со значением captcha")    void shouldSendRequestWithCaptchaValue() {        UUID id = UUID.fromString("73f17c7d-b897-443e-8181-ffadaa9bb36f");        Car car = Car.builder()                .id(ID)                .registrationNumber(REGISTRATION_NUMBER)                .certificateNumber(CERTIFICATE_NUMBER)                .build();        GibddRequest request = GibddRequest.builder()                .id(id)                .captchaCode(toLong(CAPTCHA))                .status(RequestStatus.CAPTCHA_SENT)                .createDate(now())                .car(car)                .build();        car.setRequest(Set.of(request));        given(carService.findCarWithRequestById(ID))                .willReturn(of(car));        given(requestRepository.save(request))                .willReturn(request);        requestService.sendRequestWithCaptchaValueToParser(ID, CAPTCHA);        assertThat(requestService.sendRequestWithCaptchaValueToParser(ID, CAPTCHA).getCar().getRegistrationNumber())                .isEqualTo(REGISTRATION_NUMBER);        assertThat(requestService.sendRequestWithCaptchaValueToParser(ID, CAPTCHA))                .isNotNull();        verify(requestRepository, times(6)).save(Mockito.any(GibddRequest.class));    }    @Test    @DisplayName("увеличивает количество попыток ввода captcha")    void shouldIncreaseCaptchaAttempt() {        UUID id = UUID.fromString("73f17c7d-b897-443e-8181-ffadaa9bb36f");        Car car = Car.builder()                .id(ID)                .registrationNumber(REGISTRATION_NUMBER)                .certificateNumber(CERTIFICATE_NUMBER)                .build();        GibddRequest request = GibddRequest.builder()                .id(id)                .captchaCode(toLong(CAPTCHA))                .status(RequestStatus.CAPTCHA_SENT)                .captchaAttempt(1)                .car(car)                .build();        car.setRequest(Set.of(request));        given(carService.findCarWithRequestById(ID))                .willReturn(of(car));        given(requestRepository.save(request))                .willReturn(request);        var attempt = requestService.increaseCaptchaAttempt(ID).getCaptchaAttempt();        assertThat(attempt)                .isEqualTo(2);    }    @Test    @DisplayName("изменяет статус запроса на CAPTCHA_SENT")    void shouldChangeRequestStatusToCaptchaSend() {        UUID id = UUID.fromString(UUID_STRING);        GibddRequest request = GibddRequest.builder()                .id(id)                .build();        given(requestRepository.save(request))                .willReturn(request);        requestService.changeRequestStatusForCaptchaSend(request, CAPTCHA);        assertThat(requestService.changeRequestStatusForCaptchaSend(request, CAPTCHA).getStatus())                .isEqualTo(CAPTCHA_SENT);        verify(requestRepository, times(2)).save(Mockito.any(GibddRequest.class));    }}