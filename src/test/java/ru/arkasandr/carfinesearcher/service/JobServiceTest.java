package ru.arkasandr.carfinesearcher.service;import org.junit.jupiter.api.BeforeEach;import org.junit.jupiter.api.DisplayName;import org.junit.jupiter.api.Test;import org.junit.jupiter.api.extension.ExtendWith;import org.mockito.Mock;import org.mockito.Mockito;import org.mockito.junit.jupiter.MockitoExtension;import ru.arkasandr.carfinesearcher.model.GibddRequest;import java.time.LocalDateTime;import java.util.HashSet;import java.util.Set;import java.util.UUID;import static org.mockito.BDDMockito.given;import static org.mockito.Mockito.times;import static org.mockito.Mockito.verify;import static ru.arkasandr.carfinesearcher.model.enums.RequestStatus.READY_FOR_SEND;@ExtendWith(MockitoExtension.class)@DisplayName("Класс JobService")class JobServiceTest {    private static final String UUID_STRING = "73f17c7d-b897-443e-8181-ffadaa9bb36f";    @Mock    private RequestService requestService;    @Mock    private GibddScrapService scrapService;    private JobService jobService;    @BeforeEach    void setUp() {        jobService = new JobService(requestService, scrapService);    }    @Test    @DisplayName("архивация просроченных запросов")    void whenArchiveRequestsThenStatusDeleted() {        UUID id = UUID.fromString(UUID_STRING);        GibddRequest request = GibddRequest.builder()                .id(id)                .createDate(LocalDateTime.now().minusDays(2L))                .status(READY_FOR_SEND)                .build();        var requests = new HashSet<>(Set.of(request));        given(requestService.findDeadRequestsIds())                .willReturn(requests);        jobService.archiveRequests();        verify(scrapService, times(1)).closePage(Mockito.any(UUID.class));    }}