package ru.arkasandr.carfinesearcher.service;import org.junit.jupiter.api.DisplayName;import org.junit.jupiter.api.Test;import org.telegram.telegrambots.meta.api.methods.send.SendMessage;import static org.assertj.core.api.Assertions.assertThat;import static ru.arkasandr.carfinesearcher.telegram.constants.BotMessageEnum.*;@DisplayName("Класс ValidateDataService")class ValidateDataServiceTest {    private ValidateDataService underTest = new ValidateDataService();    @Test    @DisplayName("пустой ввод данных")    void emptyExceptionWhenEmptyUserData() {        String userData = "";        String chatId = "1";        assertThat(underTest.validateUserData(chatId, userData))                .isEqualTo(new SendMessage(chatId, EXCEPTION_EMPTY_MESSAGE.getMessage()));    }    @Test    @DisplayName("неверная длина данных")    void wrongExceptionWhenNotCorrectUserDataLength() {        String userData = "123456";        String chatId = "1";        assertThat(underTest.validateUserData(chatId, userData))                .isEqualTo(new SendMessage(chatId, EXCEPTION_WRONG_MESSAGE.getMessage()));    }    @Test    @DisplayName("регистрационный знак неверного формата")    void wrongRegNumberExceptionWhenRegNumberFormatIsNotCorrect() {        String userData = "12345667";        String chatId = "1";        assertThat(underTest.validateUserData(chatId, userData))                .isEqualTo(new SendMessage(chatId, WRONG_REGISTRATION_NUMBER_MESSAGE.getMessage()));    }    @Test    @DisplayName("свидетельство о регистрации неверного формата")    void wrongCertNumberExceptionWhenCertNumberFormatIsNotCorrect() {        String userData = "1234567890";        String chatId = "1";        assertThat(underTest.validateUserData(chatId, userData))                .isEqualTo(new SendMessage(chatId, WRONG_CERTIFICATE_NUMBER_MESSAGE.getMessage()));    }    @Test    @DisplayName("свидетельство о регистрации верного формата")    void regNumberMessageWhenRegNumberFormatIsCorrect() {        String userData = "A123AA55";        String chatId = "1";        assertThat(underTest.validateUserData(chatId, userData))                .isEqualTo(new SendMessage(chatId, REGISTRATION_NUMBER_MESSAGE.getMessage().substring(0, 21)                        + userData + " "                        + REGISTRATION_NUMBER_MESSAGE.getMessage().substring(21)));    }    @Test    @DisplayName("свидетельство о регистрации верного формата")    void certNumberMessageWhenCertNumberFormatIsCorrect() {        String userData = "12AA345678";        String chatId = "1";        assertThat(underTest.validateUserData(chatId, userData))                .isEqualTo(new SendMessage(chatId, CERTIFICATE_NUMBER_MESSAGE.getMessage().substring(0, 29)                        + userData + " "                        + CERTIFICATE_NUMBER_MESSAGE.getMessage().substring(29)));    }}