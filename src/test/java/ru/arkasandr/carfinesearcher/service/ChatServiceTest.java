package ru.arkasandr.carfinesearcher.service;import org.junit.jupiter.api.BeforeEach;import org.junit.jupiter.api.DisplayName;import org.junit.jupiter.api.Test;import org.junit.jupiter.api.extension.ExtendWith;import org.mockito.Mock;import org.mockito.Mockito;import org.mockito.junit.jupiter.MockitoExtension;import org.telegram.telegrambots.meta.api.objects.Chat;import org.telegram.telegrambots.meta.api.objects.Message;import ru.arkasandr.carfinesearcher.model.Car;import ru.arkasandr.carfinesearcher.model.GibddRequest;import ru.arkasandr.carfinesearcher.repository.ChatRepository;import ru.arkasandr.carfinesearcher.repository.GibddRequestRepository;import javax.persistence.EntityNotFoundException;import static org.assertj.core.api.AssertionsForClassTypes.assertThatThrownBy;import static org.assertj.core.api.Java6Assertions.assertThat;import static org.mockito.ArgumentMatchers.eq;import static org.mockito.BDDMockito.given;import static org.mockito.Mockito.times;import static org.mockito.Mockito.verify;@ExtendWith(MockitoExtension.class)@DisplayName("Класс ChatService")class ChatServiceTest {    private static final Long ID = 1L;    private static final String FIRST_NAME = "FIRST";    private static final String LAST_NAME = "LAST";    private static final String USER_NAME = "USER";    private static final String REGISTRATION_NUMBER = "A999AA55";    @Mock    private ChatRepository chatRepository;    @Mock    private CarService carService;    @Mock    private GibddRequestRepository gibddRequestRepository;    private ChatService chatService;    @BeforeEach    void setUp() {        chatService = new ChatService(chatRepository, carService, gibddRequestRepository);    }    @Test    @DisplayName("сохранение чата из сообщения")    void whenSaveNewChatThenRepositoryCallSaveMethodOnce() {        Chat chat = new Chat();        chat.setId(ID);        chat.setFirstName(FIRST_NAME);        chat.setLastName(LAST_NAME);        chat.setUserName(USER_NAME);        Message message = new Message();        message.setChat(chat);        chatService.saveChatFromMessage(message);        verify(chatRepository, times(1)).save(Mockito.any(ru.arkasandr.carfinesearcher.model.Chat.class));    }    @Test    @DisplayName("выбрасывает исключение при отсутствии чата")    void whenFindNotExistingChatByIdThenThrowException() {        given(chatRepository.findChatByChatId(eq(ID)))                .willThrow(new EntityNotFoundException("Запись о ТС с id = " + ID + " отсутствует!"));        assertThatThrownBy(() -> chatService.findChatByChatId("1"))                .isInstanceOf(EntityNotFoundException.class);    }    @Test    @DisplayName("поиск чата по id")    void whenFindExistChatByIdThenIsNotNull() {        var chat = ru.arkasandr.carfinesearcher.model.Chat.builder()                .chatId(1L)                .firstName(FIRST_NAME)                .lastName(LAST_NAME)                .userName(USER_NAME)                .build();        given(chatRepository.findChatByChatId(eq(ID)))                .willReturn(java.util.Optional.of((chat)));        assertThat(chatService.findChatByChatId("1"))                .isNotNull();    }    @Test    @DisplayName("сохранение регистрационного знака")    void whenSaveRegistrationNumberThenServiceCallSaveMethodOnce() {        var chat = ru.arkasandr.carfinesearcher.model.Chat.builder()                .chatId(1L)                .firstName(FIRST_NAME)                .lastName(LAST_NAME)                .userName(USER_NAME)                .build();        chatService.saveRegistrationNumber(chat, REGISTRATION_NUMBER);        verify(carService, times(1)).save(Mockito.any(Car.class));    }    @Test    @DisplayName("сохранение свидетельства о регистрации")    void saveCertificateNumber() {        var certificateNumber = "AA99AAAAAA";        var chat = ru.arkasandr.carfinesearcher.model.Chat.builder()                .chatId(1L)                .firstName(FIRST_NAME)                .lastName(LAST_NAME)                .userName(USER_NAME)                .build();        Car car = Car.builder()                .id(ID)                .registrationNumber(REGISTRATION_NUMBER)                .build();        chatService.saveCertificateNumber(chat, car, certificateNumber);        verify(carService, times(1)).save(Mockito.any(Car.class));        verify(gibddRequestRepository, times(1)).save(Mockito.any(GibddRequest.class));    }}