package ru.arkasandr.carfinesearcher.service;import org.junit.jupiter.api.BeforeEach;import org.junit.jupiter.api.DisplayName;import org.junit.jupiter.api.Test;import org.junit.jupiter.api.extension.ExtendWith;import org.mockito.Mock;import org.mockito.Mockito;import org.mockito.junit.jupiter.MockitoExtension;import ru.arkasandr.carfinesearcher.model.Car;import ru.arkasandr.carfinesearcher.model.GibddRequest;import ru.arkasandr.carfinesearcher.model.enums.RequestStatus;import ru.arkasandr.carfinesearcher.repository.GibddRequestRepository;import ru.arkasandr.carfinesearcher.service.message.MessageService;import javax.persistence.EntityNotFoundException;import java.util.Set;import java.util.UUID;import static java.time.LocalDateTime.now;import static java.util.Optional.of;import static org.assertj.core.api.AssertionsForClassTypes.assertThatThrownBy;import static org.assertj.core.api.Java6Assertions.assertThat;import static org.mockito.ArgumentMatchers.eq;import static org.mockito.BDDMockito.given;import static org.mockito.Mockito.times;import static org.mockito.Mockito.verify;@ExtendWith(MockitoExtension.class)@DisplayName("Класс RequestProcessService")class RequestProcessServiceTest {    private static final Long ID = 1L;    private static final String REGISTRATION_NUMBER = "A999AA55";    private static final String CERTIFICATE_NUMBER = "77AC123123";    @Mock    private CarService carService;    @Mock    private GibddRequestRepository requestRepository;    @Mock    private MessageService messageService;    private RequestProcessService requestProcessService;    @BeforeEach    void setUp() {        requestProcessService = new RequestProcessService(carService, requestRepository, messageService);    }    @Test    @DisplayName("отправление запроса в ГИБДД")    void shouldSendRequest() {        UUID id = UUID.fromString("73f17c7d-b897-443e-8181-ffadaa9bb36f");        Car car = Car.builder()                .id(ID)                .registrationNumber(REGISTRATION_NUMBER)                .certificateNumber(CERTIFICATE_NUMBER)                .build();        GibddRequest request = GibddRequest.builder()                .id(id)                .createDate(now())                .requestDate(now())                .status(RequestStatus.SENDING)                .car(car)                .build();        car.setRequest(Set.of(request));        given(carService.findCarWithRequestById(ID))                .willReturn(of(car));        given(requestRepository.save(request))                .willReturn(request);        requestProcessService.sendRequestToGibddWithCarData(ID);        assertThat(requestProcessService.sendRequestToGibddWithCarData(ID).getCar().getRegistrationNumber())                .isEqualTo(REGISTRATION_NUMBER);        assertThat(requestProcessService.sendRequestToGibddWithCarData(ID))                .isNotNull();        verify(requestRepository, times(3)).save(Mockito.any(GibddRequest.class));    }    @Test    @DisplayName("отправление запроса с несуществующими данными")    void whenSendingRequestThrowNotFoundEntityException() {        given(carService.findCarWithRequestById(eq(ID)))                .willThrow(new EntityNotFoundException("Запись о ТС с id = " + ID + " отсутствует!"));        assertThatThrownBy(() -> requestProcessService.sendRequestToGibddWithCarData(ID))                .isInstanceOf(EntityNotFoundException.class);    }}