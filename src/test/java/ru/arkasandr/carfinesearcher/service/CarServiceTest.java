package ru.arkasandr.carfinesearcher.service;import org.junit.jupiter.api.BeforeEach;import org.junit.jupiter.api.DisplayName;import org.junit.jupiter.api.Test;import org.junit.jupiter.api.extension.ExtendWith;import org.mockito.Mock;import org.mockito.Mockito;import org.mockito.junit.jupiter.MockitoExtension;import ru.arkasandr.carfinesearcher.model.Car;import ru.arkasandr.carfinesearcher.model.GibddRequest;import ru.arkasandr.carfinesearcher.model.enums.RequestStatus;import ru.arkasandr.carfinesearcher.repository.CarRepository;import java.math.BigInteger;import java.util.Optional;import java.util.Set;import java.util.UUID;import static java.time.LocalDateTime.now;import static java.util.Optional.of;import static java.util.Optional.ofNullable;import static org.assertj.core.api.Java6Assertions.assertThat;import static org.mockito.ArgumentMatchers.eq;import static org.mockito.BDDMockito.given;import static org.mockito.Mockito.times;import static org.mockito.Mockito.verify;@ExtendWith(MockitoExtension.class)@DisplayName("Класс CarService")class CarServiceTest {    private static final Long ID = 1L;    private static final String REGISTRATION_NUMBER = "A999AA55";    @Mock    private CarRepository carRepository;    private CarService carService;    @BeforeEach    void setUp() {        carService = new CarService(carRepository);    }    @Test    @DisplayName("сохранение новой записи о ТС")    void shouldSaveNewCar() {        Car car = Car.builder()                .id(ID)                .registrationNumber(REGISTRATION_NUMBER)                .build();        carService.save(car);        verify(carRepository, times(1)).save(Mockito.any(Car.class));    }    @Test    @DisplayName("поиск ТС по регистрационному знаку")    void whenFindExistCarByRegistrationNumberThenIsNotNull() {        Car car = Car.builder()                .id(ID)                .registrationNumber(REGISTRATION_NUMBER)                .build();        given(carRepository.findByRegistrationNumber(eq(REGISTRATION_NUMBER)))                .willReturn(of(car));        assertThat(carService.findCarByRegistrationNumber(REGISTRATION_NUMBER))                .isNotNull();    }    @Test    @DisplayName("ТС по регистрационному знаку не найдено")    void whenFindNotExistCarByRegistrationNumberThenIsNotPresent() {        assertThat(carService.findCarByRegistrationNumber(REGISTRATION_NUMBER).isPresent())                .isFalse();    }    @Test    @DisplayName("поиск ТС по chatId и отсутствию свидетельства о регистрации")    void whenFindExistCarByChatIdAndCertificateNumberIsNullThenIsNotNull() {        Car car = Car.builder()                .id(ID)                .registrationNumber(REGISTRATION_NUMBER)                .build();        given(carRepository.findCarByChatIdAndCertificateNumberIsNull(eq(ID)))                .willReturn(of(car));        assertThat(carService.findCarByChatIdAndCertificateNumberIsNull(ID))                .isNotNull();    }    @Test    @DisplayName("ТС по chatId и отсутствию свидетельства о регистрации не найдено")    void whenFindNotExistCarByChatIdAndCertificateNumberIsNullThenIsNotPresent() {        assertThat(carService.findCarByChatIdAndCertificateNumberIsNull(ID).isPresent())                .isFalse();    }    @Test    @DisplayName("поиск ТС с заполненными данными и любым статусом кроме SENDING")    void whenFindExistCarIdWithFullDataNotInSendingStatusThenIsNotNull() {        given(carRepository.findCarIdWithFullDataAndNotInSendingStatus(eq(ID)))                .willReturn(ID);        assertThat(carService.findCarIdWithFullDataAndNotInSendingStatus(ID))                .isNotNull();    }    @Test    @DisplayName("поиск ТС без свидетельства о регистрации")    void whenFindCarWithoutCertificateNumberThenIsNotNull() {        Car car = Car.builder()                .id(ID)                .registrationNumber(REGISTRATION_NUMBER)                .build();        given(carRepository.findCarWithoutCertificateNumber())                .willReturn(of(car));        assertThat(carService.findCarWithoutCertificateNumber())                .isNotNull();    }    @Test    @DisplayName("поиск ТС с заполненными данными и статусом READY_FOR_SEND")    void whenFindExistCarIdWithFullDataInReadyForSendStatusThenIsNotNull() {        given(carRepository.findCarIdWithFullDataAndReadyForSend(eq(ID)))                .willReturn(ID);        assertThat(carService.findCarIdWithFullDataAndReadyForSend(ID))                .isNotNull();    }    @Test    @DisplayName("поиск ТС с заполненными данными и статусом CAPTCHA_IS_WAITING")    void whenFindExistCarIdWithFullDataInCaptchaIsWaitingStatusThenIsNotNull() {        given(carRepository.findCarIdWithFullDataAndCaptchaIsWaitingStatus(eq(ID)))                .willReturn(ID);        assertThat(carService.findCarIdWithFullDataAndCaptchaIsWaitingStatus(ID))                .isNotNull();    }    @Test    @DisplayName("поиск ТС и запросов по id")    void whenFindExistCarWithRequestThenIsNotNull() {        UUID id = UUID.fromString("73f17c7d-b897-443e-8181-ffadaa9bb36f");        Car car = Car.builder()                .id(ID)                .registrationNumber(REGISTRATION_NUMBER)                .build();        GibddRequest request = GibddRequest.builder()                .id(id)                .createDate(now())                .requestDate(now())                .status(RequestStatus.SENDING)                .car(car)                .build();        car.setRequest(Set.of(request));        given(carRepository.findCarWithRequestById(eq(ID)))                .willReturn(of(car));        var carWithOneRequest = carService.findCarWithRequestById(ID).orElse(new Car());        assertThat(carService.findCarWithRequestById(ID))                .isNotNull();        assertThat(carWithOneRequest.getRequest().size())                .isEqualTo(1);    }}